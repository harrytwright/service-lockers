# This workflow will do a clean installation of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Test and Release

on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - main
      - 'harrytwright/**'
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [ main ]

env:
  MYSQL_USER: ci-runner
  MYSQL_PASS: userpass
  MYSQL_DATABASE: lanelink

jobs:
  branch:
    if: "!contains(github.event.commits[0].message, '[skip ci]')"

    name: 'Get Test Tag'
    runs-on: ubuntu-latest

    outputs:
      sha: ${{ steps.output.outputs.sha }}

    steps:
      - uses: actions/checkout@v4
      - name: Get SHA and trim
        run: |
          raw=${{github.sha}}
          echo "GITHUB_SHA=$(echo ${raw::7})" >> $GITHUB_ENV
      - name: Add to output
        id: output
        run: echo "sha=${{ env.GITHUB_SHA }}" >> "$GITHUB_OUTPUT"
  test:
    if: "!contains(github.event.commits[0].message, '[skip ci]')"

    strategy:
      matrix:
        node-version: [ 18.x, 20.x, 21.x ]
        os: [ ubuntu-latest ]

    name: Test against ${{ matrix.node-version }}  on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    services:
      mysql:
        image: bitnami/mysql
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_USER: ${{env.MYSQL_USER}}
          MYSQL_PASSWORD: ${{env.MYSQL_PASS}}
          MYSQL_DATABASE: ${{env.MYSQL_DATABASE}}
          MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          always-auth: true
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org
      - run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - run: npm test -- --database "mysql://${{env.MYSQL_USER}}:${{env.MYSQL_PASS}}@localhost:3306/${{env.MYSQL_DATABASE}}"
      - uses: ./.github/actions/discord-alert
        if: ${{ failure() && github.event_name != 'pull_request' }}
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          bot_name: ${{ github.event.repository.name }}
  validate-routing:
    needs: [ test ]
    if: "!contains(github.event.commits[0].message, '[skip ci]')"

    name: 'Validate OpenAPI Routing'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 19.x
        uses: actions/setup-node@v4
        with:
          always-auth: true
          node-version: 19.x
          registry-url: https://registry.npmjs.org
      - run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - run: npx ts-node scripts/validate.ts
      - uses: ./.github/actions/discord-alert
        if: ${{ failure() && github.event_name != 'pull_request' }}
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          bot_name: ${{ github.event.repository.name }}
  formatter:
    needs: [ test ]
    if: "!contains(github.event.commits[0].message, '[skip ci]')"

    name: 'Checking for formatting'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 21.x
        uses: actions/setup-node@v4
        with:
          always-auth: true
          node-version: 21.x
          registry-url: https://registry.npmjs.org
      - run: npx prettier . --check
      - uses: ./.github/actions/discord-alert
        if: ${{ failure() && github.event_name != 'pull_request' }}
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          bot_name: ${{ github.event.repository.name }}
  build:
    needs: [ validate-routing, formatter ]
    if: "!contains(github.event.commits[0].message, '[skip ci]')"

    strategy:
      matrix:
        include:
          - platform: linux/amd64
            artifact: amd64

    name: Building ${{ vars.GH_TAG }} for ${{ matrix.platform }}
    uses: ./.github/workflows/build.yml
    with:
      tag: ${{ vars.GH_TAG }}
      output: ${{ vars.ARTIFACT_PATH }}
      artifact: ${{ vars.ARTIFACT_NAME }}
      platform: ${{ matrix.platform }}
    secrets: inherit
  e2e-test:
    needs: [build, branch]
    if: "!contains(github.event.commits[0].message, '[skip ci]')"

    name: 'Test image'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ vars.ARTIFACT_NAME }}
          path: ${{ vars.ARTIFACT_PATH }}
      - name: Import image
        run: |
          docker load --input ${{ vars.ARTIFACT_PATH }}/${{ vars.ARTIFACT_NAME }}.tar
          docker image ls -a
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          always-auth: true
          node-version: 20.x
          registry-url: https://registry.npmjs.org
      - run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - uses: ./.github/actions/docker-compose
        env:
          MENU_IMAGE: "${{ vars.GH_TAG }}:sha-${{ needs.branch.outputs.sha }}"
          API_KEY: "SUPERTOKENS-KEY-${{ github.run_id }}"
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          staging: 'true'
      - name: Wait for initialisation
        run: |
          sleep 5
      - name: Run the test script
        run: |
          npm run test:docker -- \
            --verbose --debug --api-key "SUPERTOKENS-KEY-${{ github.run_id }}"
      - uses: ./.github/actions/discord-alert
        if: ${{ failure() && github.event_name != 'pull_request' }}
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          bot_name: ${{ github.event.repository.name }}
  publish:
    needs: [ e2e-test ]
    if: ${{ github.actor != 'dependabot[bot]' || !contains(github.event.commits[0].message, '[skip ci]') }}

    name: Publishing ${{ vars.GH_TAG }}
    runs-on: ubuntu-latest

    permissions:
      packages: write

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ vars.ARTIFACT_NAME }}
          path: ${{ vars.ARTIFACT_PATH }}
      - name: Import image
        run: |
          docker load --input ${{ vars.ARTIFACT_PATH }}/${{ vars.ARTIFACT_NAME }}.tar
          docker image ls -a
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push ${{ vars.GH_TAG }}
        run: |
          docker push --all-tags ${{ vars.GH_TAG }}
      - uses: ./.github/actions/discord-alert
        if: ${{ failure() && github.event_name != 'pull_request' }}
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          bot_name: ${{ github.event.repository.name }}
